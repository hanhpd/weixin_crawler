# -*- encoding: utf-8 -*-
from instance import redis_instance
import collections
import json
import re
from tools.utils import str_to_dict


class TidyReqData():
    """
    anyproxy directly stores the intercepted request data in redis. TidyReqData provides a method to sort out the latest request file of each mobile phone.
    And delete history request files
    """
    @staticmethod
    def get_all_req_data():
        """
        Get all the request files in redis, that is, the record with the .req field in the key. The final returned data is sorted according to the timestamp in the key
        :return:
        ｛'1532859863455.getappmsgext.req':dict_file,)
          '1523423421446.appmsg_comment.req':dict_file｝
        """
        unordered_req_dict = {}
        ordered_req_dict = collections.OrderedDict()
        # Iterate through all requested files
        for key in redis_instance.keys("*.req"):
            req_bin_data = redis_instance.get(key)
            try:
                req_dict_data = json.loads(req_bin_data)
            except:
                req_dict_data = str(req_bin_data)
                # req_dict_data = req_bin_data.decode('utf8')
            unordered_req_dict[key.decode('utf8')] = req_dict_data
        # Return to dictionary after chronological order
        for key in sorted(unordered_req_dict.keys()):
            ordered_req_dict[key] = unordered_req_dict[key]
        return ordered_req_dict

    @staticmethod
    def add_nick_name(ordered_req_dict):
        """
        :param ordered_req_dict:
        :return:Add nick_name
        """
        wxuin_nn_dict = {}
        nickname = TidyReqData.get_nickname()
        for key in redis_instance.keys("*.nick_name"):
            wxuin_nn_dict[(redis_instance.get(key)).decode('utf8')] = (key.decode('utf8')).split('.')[0]
        for key in ordered_req_dict:
            ordered_req_dict[key]['nick_name'] = wxuin_nn_dict[key]
            ordered_req_dict[key]['wxuin'] = key
            ordered_req_dict[key]['nickname'] = nickname
        return ordered_req_dict

    @staticmethod
    def get_nickname():
        return redis_instance.get('current_nickname').decode('utf8')

    @staticmethod
    def combine(req_dic):
        """
        :param req_dic:
        :return: Find out the latest request information generated by a mobile phone (account)
        ｛
        'wxuin1':{
            'load_more':{'update_time':'1532859858625','req_data':{...}},
            'content':{'update_time':'1532859858625','req_data':{...}},
            'getappmsgext':{'update_time':'1532859858625','req_data':{...}},
            'appmsg_comment':{'update_time':'1532859858625','req_data':{...}}},
        'wxuin2':{
            'load_more':{'update_time':'1532859858625','req_data':{...}},
            'content':{'update_time':'1532859858625','req_data':{...}},
            'getappmsgext':{'update_time':'1532859858625','req_data':{...}},
            'appmsg_comment':{'update_time':'1532859858625','req_data':{...}}},
        }
        """
        tidy_req_dic = {}
        # Index of mobile phone model
        for key in req_dic:
            wxuin = TidyReqData.get_wxuin(req_dic[key])
            if wxuin=="NOT_WEIXIN":
                continue
            tidy_req_dic[wxuin] = {}

        # Reserve data type for each data under wxuin
        for wxuin in tidy_req_dic:
            tidy_req_dic[wxuin] = {}
        # Organize all_req_data data
        for key in req_dic:
            key_info = key.split('.')
            # Get meta information in request data
            timestamp = int(key_info[0])
            _type = key_info[1]
            wxuin = TidyReqData.get_wxuin(req_dic[key])
            if wxuin=="NOT_WEIXIN":
                continue
            req_data = req_dic[key]

            # Constructing a mock request data structure for a mobile phone
            # The focus is on the all_req_data section
            all_req_data = tidy_req_dic[wxuin]
            # Request data of this type has not yet appeared
            if _type not in all_req_data:
                all_req_data[_type] = {}
                all_req_data[_type]['update_time'] = timestamp
                all_req_data[_type]['req_data'] = req_data
            # This type of request data already exists. Determine whether to overwrite according to the comparison of timetamp and update_time.
            else:
                if timestamp > all_req_data[_type]['update_time']:
                    all_req_data[_type]['update_time'] = timestamp
                    all_req_data[_type]['req_data'] = req_data
        return tidy_req_dic

    @staticmethod
    def tidy():
        """
        Summarize and summarize the request data in redis, find out the latest request data of each mobile phone
        :param redis:The redis instance db must be the same as the db stored by the proxy server
        :return:For the data format, see combine. On the one hand, it returns the dictionary. On the other hand, it stores redis and adds the attribute 'update_time'.
        """
        tidy_req_data = TidyReqData.get_all_req_data()
        tidy_req_data = TidyReqData.combine(tidy_req_data)
        tidy_req_data = TidyReqData.add_nick_name(tidy_req_data)
        redis_instance.set('tidy_req_data',tidy_req_data)
        return tidy_req_data

    @staticmethod
    def get_wxuin(req):
        """
        :param req:
        :return:Extract wxuin from one req record in redis to identify different WeChat accounts
        """
        try:
            cookie_string = req["requestOptions"]["headers"]["Cookie"]
        except:
            return "NOT_WEIXIN"
        try:
            wxuin = re.findall(r'wxuin=\S*?;', cookie_string)[0][6:-1]
        except:
            wxuin = cookie_string.split('wxuin=')[-1]
        return wxuin

    @staticmethod
    def flush_data(names=None):
        """
        :param names:You can use wildcard key expressions such as * .req
        :return: Delete passion data in redis
        """
        if names==None:
            for key in redis_instance.keys():
                redis_instance.delete(key)
        for key in redis_instance.keys(names):
            redis_instance.delete(key)

    @staticmethod
    def req_to_dict(raw_req_data):
        """
        :param raw_req_data:_type['req_data'] It's just one of 5 kinds of request data
        :return:Parse the contents of the req file obtained by anyproxy into a dictionary required by request parameters
        """
        req_data = {}
        url_lsit = raw_req_data['url'].split('?')
        url = url_lsit[0]+'?'
        req_data['url'] = url
        req_data['method'] = raw_req_data['requestOptions']['method']
        req_data['headers'] = raw_req_data['requestOptions']['headers']
        body_str = raw_req_data['requestData']
        body_dict = str_to_dict(body_str, "&", "=")
        url_param_str = url_lsit[1]
        url_param_dict = str_to_dict(url_param_str, "&", "=")
        req_data['body_dict'] = body_dict
        req_data['url_param_dict'] = url_param_dict
        # Add a test field
        req_data['url_param_str'] = url_param_str
        return req_data

    @staticmethod
    def get_gzh_req_data():
        """
        :return:Returns all request data prepared for a public account
        """
        # All request parameter dictionary format uses wxuin as key
        req_data_dict = TidyReqData.tidy()
        # All request parameter list format is convenient to use each WeChat request parameter in order.
        req_data_list = []
        for key in req_data_dict:
                req_data_list.append(req_data_dict[key])
        # Number of available request parameters WeChat
        wx_num = len(req_data_list)
        return wx_num, req_data_dict, req_data_list
